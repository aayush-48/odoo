 import React from "react";
import { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "./ui/card";
import { Button } from "./ui/button";
import { Badge } from "./ui/badge";
import {
  ArrowLeft,
  ArrowRight,
  Repeat,
  Coins,
  Check,
  X,
  Star,
  MapPin,
  Clock,
  User,
  Shirt,
  Heart,
  Filter
} from "lucide-react";

interface SwapPageProps {
  onNavigate: (page: string) => void;
  selectedItem?: any;
}

const SwapPage = ({ onNavigate, selectedItem }: SwapPageProps) => {
  const [swapType, setSwapType] = useState<'items' | 'points'>('items');
  const [selectedMyItem, setSelectedMyItem] = useState<any>(null);
  const [selectedOtherItem, setSelectedOtherItem] =
useState<any>(selectedItem || null);
  const [pointsToOffer, setPointsToOffer] = useState(0);
  const [showConfirmation, setShowConfirmation] = useState(false);
  const [activeTab, setActiveTab] = useState<'my-items' | 'browse'>('my-items');

  // Mock user's items
  const myItems = [
    {
      id: 1,
      image: "https://images.unsplash.com/photo-1544966503-7cc5ac882d5f?w=300&h=300&fit=crop",
      title: "Blue Denim Jacket",
      size: "L",
      condition: "Good",
      points: 40,
      category: "Outerwear"
    },
    {
      id: 2,
      image: "https://images.unsplash.com/photo-1551698618-1dfe5d97d256?w=300&h=300&fit=crop",
      title: "Red Summer Dress",
      size: "M",
      condition: "Excellent",
      points: 55,
      category: "Dresses"
    },
    {
      id: 3,
      image: "https://images.unsplash.com/photo-1544966503-7cc5ac882d5f?w=300&h=300&fit=crop",
      title: "Black Leather Boots",
      size: "9",
      condition: "Like New",
      points: 70,
      category: "Shoes"
    },
    {
      id: 4,
      image: "https://images.unsplash.com/photo-1551698618-1dfe5d97d256?w=300&h=300&fit=crop",
      title: "White Cotton T-Shirt",
      size: "S",
      condition: "Very Good",
      points: 25,
      category: "Tops"
    }
  ];

  // Mock available items for browsing
  const availableItems = [
    {
      id: 5,
      image: "https://images.unsplash.com/photo-1544966503-7cc5ac882d5f?w=300&h=300&fit=crop",
      title: "Vintage Leather Jacket",
      size: "M",
      condition: "Excellent",
      location: "Downtown",
      distance: "1.5 km",
      points: 80,
      owner: "Alex K.",
      rating: 4.9,
      postedTime: "1 hour ago"
    },
    {
      id: 6,
      image: "https://images.unsplash.com/photo-1551698618-1dfe5d97d256?w=300&h=300&fit=crop",
      title: "Silk Scarf Collection",
      size: "One Size",
      condition: "Like New",
      location: "Midtown",
      distance: "2.8 km",
      points: 45,
      owner: "Maria L.",
      rating: 4.7,
      postedTime: "3 hours ago"
    },
    {
      id: 7,
      image: "https://images.unsplash.com/photo-1544966503-7cc5ac882d5f?w=300&h=300&fit=crop",
      title: "Designer Sunglasses",
      size: "One Size",
      condition: "Good",
      location: "Uptown",
      distance: "3.2 km",
      points: 60,
      owner: "Chris M.",
      rating: 4.8,
      postedTime: "5 hours ago"
    }
  ];

  const userPoints = 150; // Mock user points

  const handleSwapConfirm = () => {
    setShowConfirmation(true);
  };

  const handleSwapComplete = () => {
    setShowConfirmation(false);
    // Reset selections
    setSelectedMyItem(null);
    setSelectedOtherItem(null);
    setPointsToOffer(0);
    // Navigate back with success message
    onNavigate("home");
  };

  const ItemCard = ({ item, isSelected, onSelect, showOwner = false,
isMyItem = false }: any) => (
    <Card
      className={`cursor-pointer transition-all ${
        isSelected ? 'ring-2 ring-purple-500 bg-purple-50' : 'hover:shadow-lg'
      }`}
      onClick={() => onSelect(item)}
    >
      <CardContent className="p-0">
        <div className="aspect-square bg-gray-200 rounded-t-lg
overflow-hidden relative">
          <img
            src={item.image}
            alt={item.title}
            className="w-full h-full object-cover"
          />
          {isSelected && (
            <div className="absolute top-2 right-2 w-6 h-6
bg-purple-600 rounded-full flex items-center justify-center">
              <Check className="w-4 h-4 text-white" />
            </div>
          )}
          <div className="absolute bottom-2 left-2">
            <Badge className="bg-white/90 text-gray-900 text-xs">
              {item.condition}
            </Badge>
          </div>
        </div>

        <div className="p-3">
          <h4 className="font-medium text-sm text-gray-900 mb-1 line-clamp-2">
            {item.title}
          </h4>
          <p className="text-xs text-gray-500 mb-2">Size {item.size}</p>

          {showOwner && (
            <>
              <div className="flex items-center gap-1 text-xs
text-gray-500 mb-2">
                <MapPin className="w-3 h-3" />
                <span>{item.location} â€¢ {item.distance}</span>
              </div>
              <div className="flex items-center justify-between text-xs">
                <span className="text-gray-500">{item.owner}</span>
                <div className="flex items-center gap-1">
                  <Star className="w-3 h-3 fill-yellow-400 text-yellow-400" />
                  <span>{item.rating}</span>
                </div>
              </div>
            </>
          )}

          <div className="flex items-center justify-between mt-2 pt-2
border-t border-gray-100">
            <div className="flex items-center gap-1">
              <Coins className="w-3 h-3 text-purple-600" />
              <span className="text-sm font-medium
text-purple-600">{item.points}</span>
            </div>
            {showOwner && (
              <div className="flex items-center gap-1 text-xs text-gray-400">
                <Clock className="w-3 h-3" />
                <span>{item.postedTime}</span>
              </div>
            )}
          </div>
        </div>
      </CardContent>
    </Card>
  );

  if (showConfirmation) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-purple-50
to-indigo-100 p-4">
        <div className="max-w-2xl mx-auto pt-8">
          <Card className="shadow-xl">
            <CardHeader className="text-center">
              <div className="w-16 h-16 bg-green-100 rounded-full flex
items-center justify-center mx-auto mb-4">
                <Check className="w-8 h-8 text-green-600" />
              </div>
              <CardTitle className="text-2xl text-gray-900">Confirm
Swap</CardTitle>
            </CardHeader>
            <CardContent className="space-y-6">
              {swapType === 'items' ? (
                <div className="space-y-4">
                  <div className="text-center">
                    <p className="text-gray-600 mb-4">You're about to swap:</p>
                    <div className="flex items-center justify-center gap-8">
                      <div className="text-center">
                        <div className="w-24 h-24 bg-gray-200
rounded-lg mb-2 overflow-hidden">
                          <img
                            src={selectedMyItem?.image}
                            alt={selectedMyItem?.title}
                            className="w-full h-full object-cover"
                          />
                        </div>
                        <p className="text-sm font-medium">Your Item</p>
                        <p className="text-xs
text-gray-500">{selectedMyItem?.title}</p>
                      </div>
                      <ArrowRight className="w-8 h-8 text-purple-600" />
                      <div className="text-center">
                        <div className="w-24 h-24 bg-gray-200
rounded-lg mb-2 overflow-hidden">
                          <img
                            src={selectedOtherItem?.image}
                            alt={selectedOtherItem?.title}
                            className="w-full h-full object-cover"
                          />
                        </div>
                        <p className="text-sm font-medium">Their Item</p>
                        <p className="text-xs
text-gray-500">{selectedOtherItem?.title}</p>
                      </div>
                    </div>
                  </div>
                </div>
              ) : (
                <div className="text-center">
                  <p className="text-gray-600 mb-4">You're about to
purchase:</p>
                  <div className="flex items-center justify-center gap-8">
                    <div className="text-center">
                      <div className="w-24 h-24 bg-purple-100
rounded-lg mb-2 flex items-center justify-center">
                        <Coins className="w-8 h-8 text-purple-600" />
                      </div>
                      <p className="text-sm font-medium">Your Points</p>
                      <p className="text-lg font-bold
text-purple-600">{pointsToOffer}</p>
                    </div>
                    <ArrowRight className="w-8 h-8 text-purple-600" />
                    <div className="text-center">
                      <div className="w-24 h-24 bg-gray-200 rounded-lg
mb-2 overflow-hidden">
                        <img
                          src={selectedOtherItem?.image}
                          alt={selectedOtherItem?.title}
                          className="w-full h-full object-cover"
                        />
                      </div>
                      <p className="text-sm font-medium">Their Item</p>
                      <p className="text-xs
text-gray-500">{selectedOtherItem?.title}</p>
                    </div>
                  </div>
                </div>
              )}

              <div className="flex gap-4 pt-4">
                <Button
                  variant="outline"
                  className="flex-1"
                  onClick={() => setShowConfirmation(false)}
                >
                  Cancel
                </Button>
                <Button
                  className="flex-1 bg-purple-600 hover:bg-purple-700"
                  onClick={handleSwapComplete}
                >
                  Confirm Swap
                </Button>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-50
to-indigo-100">
      {/* Header */}
      <header className="bg-white/90 backdrop-blur-sm shadow-sm sticky
top-0 z-50">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex items-center justify-between h-16">
            <div className="flex items-center gap-4">
              <Button
                variant="ghost"
                onClick={() => onNavigate("home")}
                className="flex items-center gap-2"
              >
                <ArrowLeft className="w-4 h-4" />
                Back
              </Button>
              <div className="flex items-center gap-3">
                <div className="w-8 h-8 bg-purple-600 rounded-lg flex
items-center justify-center">
                  <Repeat className="w-5 h-5 text-white" />
                </div>
                <h1 className="text-xl font-bold text-gray-900">Swap Items</h1>
              </div>
            </div>

            <div className="flex items-center gap-4">
              <div className="flex items-center gap-2 text-sm">
                <Coins className="w-4 h-4 text-purple-600" />
                <span className="font-medium
text-purple-600">{userPoints} Points</span>
              </div>
            </div>
          </div>
        </div>
      </header>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Swap Type Selection */}
        <div className="mb-8">
          <div className="flex gap-4 justify-center">
            <Button
              variant={swapType === 'items' ? 'default' : 'outline'}
              onClick={() => setSwapType('items')}
              className="flex items-center gap-2"
            >
              <Repeat className="w-4 h-4" />
              Swap with My Items
            </Button>
            <Button
              variant={swapType === 'points' ? 'default' : 'outline'}
              onClick={() => setSwapType('points')}
              className="flex items-center gap-2"
            >
              <Coins className="w-4 h-4" />
              Swap with Points
            </Button>
          </div>
        </div>

        {/* Swap Interface */}
        <div className="grid lg:grid-cols-3 gap-8">
          {/* Left Column - Selection Area */}
          <div className="lg:col-span-2 space-y-6">
            {swapType === 'items' ? (
              <>
                {/* My Items Selection */}
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <User className="w-5 h-5" />
                      Select Your Item to Swap
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="grid grid-cols-2 sm:grid-cols-3
md:grid-cols-4 gap-4">
                      {myItems.map((item) => (
                        <ItemCard
                          key={item.id}
                          item={item}
                          isSelected={selectedMyItem?.id === item.id}
                          onSelect={setSelectedMyItem}
                          isMyItem={true}
                        />
                      ))}
                    </div>
                  </CardContent>
                </Card>

                {/* Other Items Selection */}
                <Card>
                  <CardHeader>
                    <div className="flex items-center justify-between">
                      <CardTitle className="flex items-center gap-2">
                        <Shirt className="w-5 h-5" />
                        Select Item to Receive
                      </CardTitle>
                      <div className="flex gap-2">
                        <Button
                          variant={activeTab === 'my-items' ?
'default' : 'outline'}
                          size="sm"
                          onClick={() => setActiveTab('my-items')}
                        >
                          Suggested
                        </Button>
                        <Button
                          variant={activeTab === 'browse' ? 'default'
: 'outline'}
                          size="sm"
                          onClick={() => setActiveTab('browse')}
                        >
                          Browse All
                        </Button>
                      </div>
                    </div>
                  </CardHeader>
                  <CardContent>
                    <div className="grid grid-cols-2 sm:grid-cols-3
md:grid-cols-4 gap-4">
                      {availableItems.map((item) => (
                        <ItemCard
                          key={item.id}
                          item={item}
                          isSelected={selectedOtherItem?.id === item.id}
                          onSelect={setSelectedOtherItem}
                          showOwner={true}
                        />
                      ))}
                    </div>
                  </CardContent>
                </Card>
              </>
            ) : (
              <>
                {/* Points Input */}
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <Coins className="w-5 h-5" />
                      Enter Points to Offer
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-4">
                      <div className="flex items-center gap-4">
                        <div className="flex-1">
                          <input
                            type="number"
                            value={pointsToOffer}
                            onChange={(e) =>
setPointsToOffer(Number(e.target.value))}
                            placeholder="Enter points"
                            className="w-full px-4 py-3 border
border-gray-300 rounded-lg focus:border-purple-500 focus:ring-2
focus:ring-purple-200"
                            min="0"
                            max={userPoints}
                          />
                        </div>
                        <div className="text-sm text-gray-500">
                          Max: {userPoints} points
                        </div>
                      </div>
                      <div className="flex gap-2">
                        {[25, 50, 75, 100].map((amount) => (
                          <Button
                            key={amount}
                            variant="outline"
                            size="sm"
                            onClick={() => setPointsToOffer(amount)}
                            disabled={amount > userPoints}
                          >
                            {amount}
                          </Button>
                        ))}
                      </div>
                    </div>
                  </CardContent>
                </Card>

                {/* Available Items for Points */}
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <Shirt className="w-5 h-5" />
                      Select Item to Purchase
                    </CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="grid grid-cols-2 sm:grid-cols-3
md:grid-cols-4 gap-4">
                      {availableItems.map((item) => (
                        <ItemCard
                          key={item.id}
                          item={item}
                          isSelected={selectedOtherItem?.id === item.id}
                          onSelect={setSelectedOtherItem}
                          showOwner={true}
                        />
                      ))}
                    </div>
                  </CardContent>
                </Card>
              </>
            )}
          </div>

          {/* Right Column - Swap Summary */}
          <div className="lg:col-span-1">
            <Card className="sticky top-24">
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Repeat className="w-5 h-5" />
                  Swap Summary
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                {swapType === 'items' ? (
                  <>
                    <div className="space-y-3">
                      <div className="text-sm font-medium
text-gray-700">Your Item:</div>
                      {selectedMyItem ? (
                        <div className="flex items-center gap-3 p-3
bg-gray-50 rounded-lg">
                          <div className="w-12 h-12 bg-gray-200
rounded overflow-hidden">
                            <img
                              src={selectedMyItem.image}
                              alt={selectedMyItem.title}
                              className="w-full h-full object-cover"
                            />
                          </div>
                          <div className="flex-1">
                            <p className="text-sm
font-medium">{selectedMyItem.title}</p>
                            <p className="text-xs text-gray-500">Size
{selectedMyItem.size}</p>
                          </div>
                        </div>
                      ) : (
                        <div className="p-4 border-2 border-dashed
border-gray-300 rounded-lg text-center text-gray-500">
                          Select an item to swap
                        </div>
                      )}
                    </div>

                    <div className="flex justify-center">
                      <ArrowRight className="w-6 h-6 text-purple-600" />
                    </div>

                    <div className="space-y-3">
                      <div className="text-sm font-medium
text-gray-700">Their Item:</div>
                      {selectedOtherItem ? (
                        <div className="flex items-center gap-3 p-3
bg-gray-50 rounded-lg">
                          <div className="w-12 h-12 bg-gray-200
rounded overflow-hidden">
                            <img
                              src={selectedOtherItem.image}
                              alt={selectedOtherItem.title}
                              className="w-full h-full object-cover"
                            />
                          </div>
                          <div className="flex-1">
                            <p className="text-sm
font-medium">{selectedOtherItem.title}</p>
                            <p className="text-xs text-gray-500">Size
{selectedOtherItem.size}</p>
                          </div>
                        </div>
                      ) : (
                        <div className="p-4 border-2 border-dashed
border-gray-300 rounded-lg text-center text-gray-500">
                          Select an item to receive
                        </div>
                      )}
                    </div>
                  </>
                ) : (
                  <>
                    <div className="space-y-3">
                      <div className="text-sm font-medium
text-gray-700">Your Offer:</div>
                      <div className="flex items-center gap-3 p-3
bg-purple-50 rounded-lg">
                        <div className="w-12 h-12 bg-purple-100
rounded-lg flex items-center justify-center">
                          <Coins className="w-6 h-6 text-purple-600" />
                        </div>
                        <div className="flex-1">
                          <p className="text-lg font-bold
text-purple-600">{pointsToOffer} Points</p>
                          <p className="text-xs
text-gray-500">Remaining: {userPoints - pointsToOffer}</p>
                        </div>
                      </div>
                    </div>

                    <div className="flex justify-center">
                      <ArrowRight className="w-6 h-6 text-purple-600" />
                    </div>

                    <div className="space-y-3">
                      <div className="text-sm font-medium
text-gray-700">Item to Purchase:</div>
                      {selectedOtherItem ? (
                        <div className="flex items-center gap-3 p-3
bg-gray-50 rounded-lg">
                          <div className="w-12 h-12 bg-gray-200
rounded overflow-hidden">
                            <img
                              src={selectedOtherItem.image}
                              alt={selectedOtherItem.title}
                              className="w-full h-full object-cover"
                            />
                          </div>
                          <div className="flex-1">
                            <p className="text-sm
font-medium">{selectedOtherItem.title}</p>
                            <p className="text-xs text-gray-500">Size
{selectedOtherItem.size}</p>
                            <p className="text-xs text-purple-600
font-medium">{selectedOtherItem.points} points</p>
                          </div>
                        </div>
                      ) : (
                        <div className="p-4 border-2 border-dashed
border-gray-300 rounded-lg text-center text-gray-500">
                          Select an item to purchase
                        </div>
                      )}
                    </div>
                  </>
                )}

                <Button
                  className="w-full bg-purple-600 hover:bg-purple-700"
                  onClick={handleSwapConfirm}
                  disabled={
                    swapType === 'items'
                      ? !selectedMyItem || !selectedOtherItem
                      : !selectedOtherItem || pointsToOffer === 0 ||
pointsToOffer > userPoints || pointsToOffer <
(selectedOtherItem?.points || 0)
                  }
                >
                  {swapType === 'items' ? 'Propose Swap' : 'Purchase Item'}
                </Button>

                {swapType === 'points' && selectedOtherItem &&
pointsToOffer > 0 && pointsToOffer < selectedOtherItem.points && (
                  <p className="text-xs text-red-500 text-center">
                    Insufficient points. Need {selectedOtherItem.points} points.
                  </p>
                )}
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </div>
  );
};

export default SwapPage;
